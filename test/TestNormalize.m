classdef TestNormalize < matlab.unittest.TestCase

properties (TestParameter)
p = init_norm()
d = init_drop_slash()
norm_fun = {@stdlib.normalize, @stdlib.native.normalize, @stdlib.java.normalize, @stdlib.python.normalize}
end

methods(TestClassSetup)
function pkg_path(tc)
fsp = matlab.unittest.fixtures.PathFixture(fileparts(fileparts(mfilename('fullpath'))));
tc.applyFixture(fsp)
end
end

methods (Test, TestTags="pure")

function test_normalize(tc, p, norm_fun)
is_capable(tc, norm_fun)

tc.verifyEqual(norm_fun(p{1}), p{2}, ...
  sprintf("normalize(%s)   mex: %d", p{1}, stdlib.is_mex_fun("stdlib.normalize")))
end

function test_drop_slash(tc, d)
tc.verifyEqual(stdlib.drop_slash(d{1}), d{2}, ...
  sprintf("drop_slash(%s)   mex: %d", d{1}, stdlib.is_mex_fun("stdlib.drop_slash")))
end

end

end

function p = init_norm()

p = {
  {"", "."}, ...
  {"a/..", "."}, ...
  {"/a/b/", fullfile("/a", "b")},  ...
  {"a/b/", fullfile("a", "b")}, ...
  {"a/../c", "c"}, ...
  {"a/b/../c", fullfile("a", "c")}, ...
  {"a/b/../../c", "c"}, ...
  {"a/b/../../c/..", "."}, ...
  {"a/b/../../c/../..", ".."}, ...
  {"a////b", fullfile("a", "b")}, ...
  {".a", ".a"}, ...
  {"..a", "..a"}, ...
  {"a.", "a."}, ...
  {"a..", "a.."}, ...
  {"./a/.", "a"}, ...
  {"../a", fullfile("..", "a")}
};

if ispc
  p{end+1} = {"//a/b/", "\\a\b"};
end

end


function d = init_drop_slash()
d = {...
{"", ""}, ...
{"/", "/"}, ...
{"a/", "a"}, ...
{"a/b", "a/b"}, ...
{"a/b/", "a/b"}, ...
{"////", "/"}, ...
{"a////b", "a/b"}, ...
{"a//b//", "a/b"}, ...
{"///", "/"}};
if ispc()
  dd = {...
    {"c:/", "c:/"}, ...
    {"c://", "c:/"}, ...
    {"c:\\", "c:/"}, ...
    {"c:///a/b//", "c:/a/b"}, ...
    {"c:/a/b//", "c:/a/b"}
  };
  d = [d, dd];
end

end
